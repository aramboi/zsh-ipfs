#compdef ipfs
#autoload

local -a _1st_arguments
_1st_arguments=(
  'add:<path> Add an object to ipfs.'
  'bitswap:A set of commands to manipulate the bitswap agent'
  'block:Manipulate raw IPFS blocks'
  'bootstrap:Show or edit the list of bootstrap peers'
  'cat:<ipfs-path> Show IPFS object data'
  'commands:List all available commands.'
  'config:<key> [<value>] get and set IPFS config values'
  'daemon:Run a network-connected IPFS node'
  'dht:Issue commands directly through the DHT'
  'diag:Generates diagnostic reports'
  'dns:<domain-name> DNS link resolver'
  'file:Interact with ipfs objects representing Unix filesystems'
  'get:Download IPFS objects'
  'id:[<peer-id>] Show IPFS Node ID info'
  'init:Initializes IPFS config file'
  'log:Interact with the daemon log output'
  'ls:<ipfs-path> List links from an object.'
  'mount:Mounts IPFS to the filesystem (read-only)'
  'name:IPFS namespace (IPNS) tool'
  'object:Interact with ipfs objects'
  'pin:Pin (and unpin) objects to local storage'
  'ping:<peer ID> Send echo request packets to IPFS hosts'
  'refs:<ipfs-path> Lists links (references) from an object'
  'repo:Manipulate the IPFS repo'
  'resolve:Resolve the value of names to IPFS'
  'stats:Query IPFS statistics'
  'swarm:Swarm inspection tool'
  'tar:Utility functions for tar files in ipfs'
  'tour:[<id>] An introduction to IPFS'
  'update:Downloads and installs updates for IPFS (disabled)'
  'version:Shows ipfs version information'
)

local -a _bitswap_arguments
_bitswap_arguments=(
  'wantlist:Show blocks currently on the wantlist'
  'stat:Show some diagnostic information on the bitswap agent'
  'unwant:<key> Remove a given block from your wantlist'
)

local -a _block_arguments
_block_arguments=(
  'stat:<key> Print information of a raw IPFS block'
  'get:<key> Get a raw IPFS block'
  'put:<data> Stores input as an IPFS block'
)

local -a _bootstrap_arguments
_bootstrap_arguments=(
  'add:[<peer>] Add peers to the bootstrap list'
  'rm:[<peer>] Removes peers from the bootstrap list'
  'list:Show peers in the bootstrap list'
)

local -a _config_arguments
_config_arguments=(
  'show:Outputs the content of the config file'
  'edit:Opens the config file for editing in $EDITOR'
  'replace:<file> Replaces the config with <file>'
)

local -a _log_arguments
_log_arguments=(
  'level:<subsystem> <level> Change the logging level'
  'tail:Read the logs'
)

_ipfs_subcommand(){
  local curcontext="$curcontext" state line
  typeset -A opt_args
  _arguments -C \
      ':command:->command' \
      '*::options:->options'
  case $state in
    (command)
      _describe -t commands "ipfs subcommand" $1
      return
    ;;
    (options)
      case $line[1] in
        (wantlist)
          _arguments '(-p --peer)'{-p,--peer}'[Specify which peer to show wantlist for (default self)]'
        ;;
        (add)
          _arguments '--default[Add default bootstrap nodes]'
        ;;
        (rm)
          _arguments '--all[Remove all bootstrap peers.]'
        ;;
      esac
    ;;
  esac
}

local expl

_arguments \
  '(-c --config)'{-c,--config}'[Path to the configuration file to use]' \
  '(-D --debug)'{-D,--debug}'[Operate in debug mode]' \
  '(--help)--help[Show the full command help text]' \
  '(--h)-h[Show a short version of the command help text]' \
  '(-L --local)'{-L,--local}'[Run the command locally, instead of using the daemon]' \
  '(--api)--api[Overrides the routing option (dht, supernode)]' \
  '*:: :->subcmds' && return 0

if (( CURRENT == 1 )); then
  _describe -t commands "ipfs subcommand" _1st_arguments
  return
fi

case "$words[1]" in
  (add)
    _arguments \
      '(-r --recursive)'{-r,--recursive}'[Add directory paths recursively]' \
      '(-q --quiet)'{-q,--quiet}'[Write minimal output]' \
      '(-p --progress)'{-p,--progress}'[Stream progress data]' \
      '(-t --trickle)'{-t,--trickle}'[Use trickle-dag format for dag generation]' \
      '(-n --only-hash)'{-n,--only-hash}'[Only chunk and hash - do not write to disk]' \
      '(-w --wrap-with-directory)'{-w,--wrap-with-directory}'[Wrap files with a directory object]' \
      '(-H --hidden)'{-h,--hidden}'[Include files that are hidden]' \
      '(-s --chunker)'{-s,--chunker}'[chunking algorithm to use]'
  ;;
  (bitswap)
    _ipfs_subcommand _bitswap_arguments
  ;;
  (block)
    _ipfs_subcommand _block_arguments
  ;;
  (bootstrap)
    _ipfs_subcommand _bootstrap_arguments
  ;;
  (commands)
    _arguments '(-f --flags)'{-f,--flags}'[Show command flags]'
  ;;
  (config)
    _arguments \
      '--bool[Set a boolean value]' \
      '--json[Parse stringified JSON]'
    _ipfs_subcommand _config_arguments
  ;;
  (log)
    _ipfs_subcommand _log_arguments
  ;;
  (mount)
    _arguments \
      '(-f --ipfs-path)'{-f,--ipfs-path}'[The path where IPFS should be mounted]' \
      '(-n --ipns-path)'{-n,--ipns-path}'[The path where IPNS should be mounted]'
  ;;
esac
